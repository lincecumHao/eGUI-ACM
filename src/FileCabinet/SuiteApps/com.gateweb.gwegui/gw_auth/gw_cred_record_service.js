define(['N/search', 'N/record', './gw_crypto_service'], function (
  search,
  record,
  GwCryptoService
) {
  /**
   * Module Description...
   *
   * @type {Object} module-name
   *
   * @copyright 2020 Gateweb
   * @author Sean Lin <seanlin816@gmail.com>
   *
   * @NApiVersion 2.1
   * @NModuleScope Public

   */
  var exports = {}
  var recordTypeId = 'customrecord_gw_master_credentials'

  function searchCredentialIds(taxId) {
    var credRecordIds = []
    var credSearch = search.load({ id: 'customsearch_gw_cred_search' })
    var taxIdFilter = search.createFilter({
      name: 'custrecord_gw_cred_tax_id',
      operator: search.Operator.IS,
      values: taxId,
    })
    credSearch.filters.push(taxIdFilter)
    credSearch.run().each(function (result) {
      credRecordIds.push(result.id)
      return true
    })
    log.debug({ title: 'searchCredential ids', details: credRecordIds })
    var id = credRecordIds[0] || 0
    return id
  }

  function getPasswordToken(taxId) {
    var fieldId = 'custrecord_gw_cred_password_token'
    var recordId = searchCredentialIds(taxId)
    var lookUpResults = search.lookupFields({
      type: recordTypeId,
      id: recordId,
      columns: [fieldId],
    })
    var passwordToken = lookUpResults[fieldId]
    return passwordToken
  }

  /**
   *
   * @param {Object} formData
   * @param {string} formData.name: - Company Legal Name
   * @param {string} formData.nsAccountId - NetSuite Account ID
   * @param {string} formData.subsidiary - Subsidiary ID
   * @param {string} formData.gui - VAT/FIN/EIN/GUI Tax ID
   * @param {string} formData.email - Company Email
   * @param {string} formData.passwordToken - Password token generated by suitelet
   */
  function createCredentialRecord(formData) {
    var newRecord = record.create({
      type: 'customrecord_gw_master_credentials',
    })
    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_ns_acct',
      value: formData.nsAccountId,
    })
    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_subsidiary',
      value: formData.subsidiary,
    })
    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_tax_id',
      value: formData.gui,
    })
    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_company_name',
      value: formData.name,
    })
    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_password_token',
      value: formData.passwordToken,
    })
    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_email',
      value: formData.email,
    })

    var cipher = GwCryptoService.encryptData(
      formData.passwordToken,
      JSON.stringify(formData)
    )

    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_encrypt_text',
      value: cipher.ciphertext,
    })
    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_encrypt_iv',
      value: cipher.iv,
    })

    var hashedText = GwCryptoService.hashSha256(
      formData.passwordToken,
      JSON.stringify(formData)
    )

    newRecord.setValue({
      fieldId: 'custrecord_gw_cred_secret_key',
      value: hashedText,
    })
    var id = newRecord.save()
    return id
  }

  /**
   *
   * @param {Object} formData
   * @param {string} formData.name: - Company Legal Name
   * @param {string} formData.nsAccountId - NetSuite Account ID
   * @param {string} formData.subsidiary - Subsidiary ID
   * @param {string} formData.gui - VAT/FIN/EIN/GUI Tax ID
   * @param {string} formData.email - Company Email
   * @param {string} formData.passwordToken - Password token generated by suitelet
   */
  function updateCredentialRecord(recordId, formData) {
    var cipher = GwCryptoService.encryptData(
      formData.passwordToken,
      JSON.stringify(formData)
    )
    var id = record.submitFields({
      type: 'customrecord_gw_master_credentials',
      id: recordId,
      values: {
        custrecord_gw_cred_ns_acct: formData.nsAccountId,
        custrecord_gw_cred_subsidiary: formData.subsidiary,
        custrecord_gw_cred_tax_id: formData.gui,
        custrecord_gw_cred_company_name: formData.name,
        custrecord_gw_cred_password_token: formData.passwordToken,
        custrecord_gw_cred_email: formData.email,
        custrecord_gw_cred_encrypt_text: cipher.ciphertext,
        custrecord_gw_cred_encrypt_iv: cipher.iv,
        custrecord_gw_cred_secret_key: GwCryptoService.hashSha256(
          formData.passwordToken,
          JSON.stringify(formData)
        ),
      },
      options: {
        enableSourcing: false,
        ignoreMandatoryFields: true,
      },
    })
    return id
  }

  exports.getIdByTaxId = searchCredentialIds
  exports.getPasswordToken = getPasswordToken
  exports.create = createCredentialRecord
  exports.update = updateCredentialRecord
  return exports
})
